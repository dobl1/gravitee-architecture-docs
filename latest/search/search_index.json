{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Gravitee.io Doc \u00b6 Note Placeholder page.","title":"Home"},{"location":"#graviteeio-doc","text":"Note Placeholder page.","title":"Gravitee.io Doc"},{"location":"tags/","text":"Tags \u00b6 Following is a list of relevant tags: [TAGS]","title":"Tags"},{"location":"tags/#tags","text":"Following is a list of relevant tags: [TAGS]","title":"Tags"},{"location":"access-management/","tags":["Access Management","OSS"],"text":"Access Management \u00b6 Note Placeholder page.","title":"Access Management"},{"location":"access-management/#access-management","text":"Note Placeholder page.","title":"Access Management"},{"location":"alert-engine/","tags":["Alert Engine","ENTERPRISE"],"text":"Alert Engine \u00b6 Note Placeholder page.","title":"Alert Engine"},{"location":"alert-engine/#alert-engine","text":"Note Placeholder page.","title":"Alert Engine"},{"location":"api-designer/","tags":["API Designer","ENTERPRISE"],"text":"API Designer \u00b6 Note Placeholder page.","title":"API Designer"},{"location":"api-designer/#api-designer","text":"Note Placeholder page.","title":"API Designer"},{"location":"api-management/","text":"API Management \u00b6 Note Placeholder page.","title":"API Management"},{"location":"api-management/#api-management","text":"Note Placeholder page.","title":"API Management"},{"location":"api-management/architecture/","tags":["Architecture"],"text":"Gravitee.io APIm Architecture \u00b6 Self-Hosted Hybrid","title":"Gravitee.io APIm Architecture"},{"location":"api-management/architecture/#graviteeio-apim-architecture","text":"Self-Hosted Hybrid","title":"Gravitee.io APIm Architecture"},{"location":"api-management/architecture/hybrid/","tags":["Architecture"],"text":"Gravitee.io API Management Self-Hosted \u00b6 Components \u00b6 SaaS Components \u00b6 Component Description Administration Console (for API producers) This web UI gives easy access to some key APIM API services. API Publishers can use it to publish APIs. Administrators can also configure global platform settings and specific portal settings. Dev / API Portal (for API consumers) This web UI gives easy access to some key APIM API services. API Consumers can use it to search for, view, try out and subscribe to a published API. They can also use it to manage their applications . Management API This RESTful API exposes services to manage and configure the APIM Console and APIM Portal web UIs. All exposed services are restricted by authentication and authorization rules. For more information, see the API Reference section. SaaS API Gateways APIM Gateway is the core component of the APIM platform. You can think of it like a smart proxy. Unlike a traditional HTTP proxy, APIM Gateway has the capability to apply policies (i.e., rules) to both HTTP requests and responses according to your needs. With these policies, you can enhance request and response processing by adding transformations, security, and many other exciting features. Bridge Gateways A bridge API Gateway exposes extra HTTP services for bridging HTTP calls to the underlying repository (which can be any of our supported repositories: MongoDB, JDBC and so on) Config Database All the API Management platform management data, such as API definitions, users, applications and plans. S3 Bucket + Analytics Database Analytics and logs data [Enterprise] Cockpit Cockpit is a centralized, multi-environments / organizations tool for managing all your Gravitee API Management and Access Management installations in a single place. [Enterprise] API Designer Drag-and-Drop graphical (MindMap based) API designer to quickly and intuitively design your APIs (Swagger / OAS) and even deploy mocked APIs for quick testing. [Enterprise] Alert Engine Alert Engine (AE) provides APIM and AM users with efficient and flexible API platform monitoring, including advanced alerting configuration and notifications sent through their preferred channels, such as email, Slack and using Webhooks. AE does not require any external components or a database as it does not store anything. It receives events and sends notifications under the conditions which have been pre-configured upstream with triggers. On-prem / Private cloud components \u00b6 Component Description Gravitee.io APIm Gaetway APIM Gateway is the core component of the APIM platform, smartly proxing trafic applying policies. Logstash Collect and send local Gateways logs and metrics to the Gravitee.io APIM SaaS Control Plane. Redis Database use locally for rate limits synchronized counters (RateLimit, Quota, Spike Arrest) and optionnaly as an external cache for the Cache policy . Architecture Diagram \u00b6 Self-Hosted to SaaS connections \u00b6","title":"Hybrid"},{"location":"api-management/architecture/hybrid/#graviteeio-api-management-self-hosted","text":"","title":"Gravitee.io API Management Self-Hosted"},{"location":"api-management/architecture/hybrid/#components","text":"","title":"Components"},{"location":"api-management/architecture/hybrid/#saas-components","text":"Component Description Administration Console (for API producers) This web UI gives easy access to some key APIM API services. API Publishers can use it to publish APIs. Administrators can also configure global platform settings and specific portal settings. Dev / API Portal (for API consumers) This web UI gives easy access to some key APIM API services. API Consumers can use it to search for, view, try out and subscribe to a published API. They can also use it to manage their applications . Management API This RESTful API exposes services to manage and configure the APIM Console and APIM Portal web UIs. All exposed services are restricted by authentication and authorization rules. For more information, see the API Reference section. SaaS API Gateways APIM Gateway is the core component of the APIM platform. You can think of it like a smart proxy. Unlike a traditional HTTP proxy, APIM Gateway has the capability to apply policies (i.e., rules) to both HTTP requests and responses according to your needs. With these policies, you can enhance request and response processing by adding transformations, security, and many other exciting features. Bridge Gateways A bridge API Gateway exposes extra HTTP services for bridging HTTP calls to the underlying repository (which can be any of our supported repositories: MongoDB, JDBC and so on) Config Database All the API Management platform management data, such as API definitions, users, applications and plans. S3 Bucket + Analytics Database Analytics and logs data [Enterprise] Cockpit Cockpit is a centralized, multi-environments / organizations tool for managing all your Gravitee API Management and Access Management installations in a single place. [Enterprise] API Designer Drag-and-Drop graphical (MindMap based) API designer to quickly and intuitively design your APIs (Swagger / OAS) and even deploy mocked APIs for quick testing. [Enterprise] Alert Engine Alert Engine (AE) provides APIM and AM users with efficient and flexible API platform monitoring, including advanced alerting configuration and notifications sent through their preferred channels, such as email, Slack and using Webhooks. AE does not require any external components or a database as it does not store anything. It receives events and sends notifications under the conditions which have been pre-configured upstream with triggers.","title":"SaaS Components"},{"location":"api-management/architecture/hybrid/#on-prem-private-cloud-components","text":"Component Description Gravitee.io APIm Gaetway APIM Gateway is the core component of the APIM platform, smartly proxing trafic applying policies. Logstash Collect and send local Gateways logs and metrics to the Gravitee.io APIM SaaS Control Plane. Redis Database use locally for rate limits synchronized counters (RateLimit, Quota, Spike Arrest) and optionnaly as an external cache for the Cache policy .","title":"On-prem / Private cloud components"},{"location":"api-management/architecture/hybrid/#architecture-diagram","text":"","title":"Architecture Diagram"},{"location":"api-management/architecture/hybrid/#self-hosted-to-saas-connections","text":"","title":"Self-Hosted to SaaS connections"},{"location":"api-management/architecture/self-hosted/","tags":["Architecture"],"text":"Gravitee.io API Management Hybrid \u00b6 Components \u00b6 Component Description Administration Console (for API producers) This web UI gives easy access to some key APIM API services. API Publishers can use it to publish APIs. Administrators can also configure global platform settings and specific portal settings. Dev / API Portal (for API consumers) This web UI gives easy access to some key APIM API services. API Consumers can use it to search for, view, try out and subscribe to a published API. They can also use it to manage their applications . Management API This RESTful API exposes services to manage and configure the APIM Console and APIM Portal web UIs. All exposed services are restricted by authentication and authorization rules. For more information, see the API Reference section. This components might be installed twice if you need a separation between Dev Portal and Administration Console For example, to make the administration console accessible only internally (LAN), as opposed to the Dev Portal accessible from the outside (DMZ), in this scenario the Management API will only expose the operations that relates respectively to the Dev Portal and Administration Console. API Gateways APIM Gateway is the core component of the APIM platform. You can think of it like a smart proxy. Unlike a traditional HTTP proxy, APIM Gateway has the capability to apply policies (i.e., rules) to both HTTP requests and responses according to your needs. With these policies, you can enhance request and response processing by adding transformations, security, and many other exciting features. Config Database Database use to store all the API Management platform management data, such as API definitions, users, applications and plans. Analytics Database Database use to store the variety of events occurring in the gateway. Rate Limits Database Database use locally for rate limits synchronized counters (Rate Limit, Quota, Spike Arrest) and optionnaly as an external cache for the Cache policy . [Enterprise] Cockpit Cockpit is a centralized, multi-environments / organizations tool for managing all your Gravitee API Management and Access Management installations in a single place. [Enterprise] API Designer Drag-and-Drop graphical (MindMap based) API designer to quickly and intuitively design your APIs (Swagger / OAS) and even deploy mocked APIs for quick testing. [Enterprise] Alert Engine Alert Engine (AE) provides APIM and AM users with efficient and flexible API platform monitoring, including advanced alerting configuration and notifications sent through their preferred channels, such as email, Slack and using Webhooks. AE does not require any external components or a database as it does not store anything. It receives events and sends notifications under the conditions which have been pre-configured upstream with triggers. Architecture diagram \u00b6 Install on VMs : LAN + DMZ deployment \u00b6","title":"Self-Hosted"},{"location":"api-management/architecture/self-hosted/#graviteeio-api-management-hybrid","text":"","title":"Gravitee.io API Management Hybrid"},{"location":"api-management/architecture/self-hosted/#components","text":"Component Description Administration Console (for API producers) This web UI gives easy access to some key APIM API services. API Publishers can use it to publish APIs. Administrators can also configure global platform settings and specific portal settings. Dev / API Portal (for API consumers) This web UI gives easy access to some key APIM API services. API Consumers can use it to search for, view, try out and subscribe to a published API. They can also use it to manage their applications . Management API This RESTful API exposes services to manage and configure the APIM Console and APIM Portal web UIs. All exposed services are restricted by authentication and authorization rules. For more information, see the API Reference section. This components might be installed twice if you need a separation between Dev Portal and Administration Console For example, to make the administration console accessible only internally (LAN), as opposed to the Dev Portal accessible from the outside (DMZ), in this scenario the Management API will only expose the operations that relates respectively to the Dev Portal and Administration Console. API Gateways APIM Gateway is the core component of the APIM platform. You can think of it like a smart proxy. Unlike a traditional HTTP proxy, APIM Gateway has the capability to apply policies (i.e., rules) to both HTTP requests and responses according to your needs. With these policies, you can enhance request and response processing by adding transformations, security, and many other exciting features. Config Database Database use to store all the API Management platform management data, such as API definitions, users, applications and plans. Analytics Database Database use to store the variety of events occurring in the gateway. Rate Limits Database Database use locally for rate limits synchronized counters (Rate Limit, Quota, Spike Arrest) and optionnaly as an external cache for the Cache policy . [Enterprise] Cockpit Cockpit is a centralized, multi-environments / organizations tool for managing all your Gravitee API Management and Access Management installations in a single place. [Enterprise] API Designer Drag-and-Drop graphical (MindMap based) API designer to quickly and intuitively design your APIs (Swagger / OAS) and even deploy mocked APIs for quick testing. [Enterprise] Alert Engine Alert Engine (AE) provides APIM and AM users with efficient and flexible API platform monitoring, including advanced alerting configuration and notifications sent through their preferred channels, such as email, Slack and using Webhooks. AE does not require any external components or a database as it does not store anything. It receives events and sends notifications under the conditions which have been pre-configured upstream with triggers.","title":"Components"},{"location":"api-management/architecture/self-hosted/#architecture-diagram","text":"","title":"Architecture diagram"},{"location":"api-management/architecture/self-hosted/#install-on-vms-lan-dmz-deployment","text":"","title":"Install on VMs : LAN + DMZ deployment"},{"location":"api-management/install/hybrid/","tags":["Hybrid"],"text":"APIm Hybrid Deployment Guide \u00b6 Introduction This documentation page relates to the installation of the client (On-Prem / Private Cloud) part of the API Management platform in a Hybrid architecture (SaaS + On-prem / Private cloud). Architecture \u00b6 Architecture You can find all architecture information (components descriptions, diagrams) in the architecture section . Hybrid Architecture Self-Hosted (Hybrid) gateway \u00b6 Installation \u00b6 Kubernetes (Helm) Docker Binaries Online documentation and assets Install APIM on Kubernetes with the Helm Chart Deploy a Hybrid architecture in Kubernetes Gravitee.io Helm Charts Prerequisites Kubectl Helm v3 Steps : Add the Gravitee.io Helm charts repository. helm repo add graviteeio https://helm.gravitee.io Install using the values.yaml file. Here is the full values.yaml example , please customize it following the Configuration sections . helm install graviteeio-apim3x graviteeio/apim3 \\ --create-namespace \\ --namespace gravitee-apim \\ -f values.yaml Enterprise License If you are using enterprise plugins, you have to install a license file. Please chose one of these options Add the license.key in the values.yml file Add a helm install command parameter --set license.key= and provide the B64 encoded license : linux: base64 -w 0 license.key macOS: base64 license.key windows (certutil): certutil -encode license.key tmp.b64 && findstr /v /c:- tmp.b64 > license.b64 && del tmp.b64 and copy the context of the license.b64 generated file. Online documentation APIM Docker installation Local file structure . \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 gateway \u2502 \u2502 \u2514\u2500\u2500 gravitee.yml # (1) \u2502 \u2514\u2500\u2500 logstash \u2502 \u2514\u2500\u2500 logstash.conf # (2) \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 logs \u2502 \u2514\u2500\u2500 apim-gateway-dev \u2514\u2500\u2500 plugins # (3) \u251c\u2500\u2500 gravitee-apim-repository-hazelcast-3.18.3.zip \u2514\u2500\u2500 gravitee-apim-repository-redis-3.18.3.zip If you prefer to override the default gravitee.yml configuration file, instead of using the environement variables in the docker-compose.yml file. Logstash configuration file . Additional plugins location. Download plugins gravitee-apim-repository-redis-3.18.3.zip gravitee-apim-repository-hazelcast-3.18.3.zip Download plugins gravitee-apim-repository-redis-3.18.3.zip Online documentation APIM VMs installation Configuration \u00b6 There is at least 3 connections to configure : The connection to the SaaS Management plane with the Bridge Gateway. The connection to push Analytics and Logs with file or tcp reporter pushing data for logstash to send them to the SaaS storage. The connection the local rate limits database. [Optional] The connection to the SaaS Alert Engine. Management \u00b6 Kubernetes (Helm) Docker Gateway with gravitee.yml file Into the values.yaml configuration file : values.yaml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 management : type : http gateway : management : http : url : https://bridge-gateway-url:bridge-gateway-port username : kubernetes://<namespace>/secrets/<my-secret-name>/<my-secret-key> password : kubernetes://<namespace>/secrets/<my-secret-name>/<my-secret-key> # ssl: # trustall: true # verifyHostname: true # keystore: # type: jks # Supports jks, pem, pkcs12 # path: ${gravitee.home}/security/keystore.jks # password: secret # truststore: # type: jks # Supports jks, pem, pkcs12 # path: ${gravitee.home}/security/truststore.jks # password: secret # proxy: # host: bridge-gateway-proxy-host # port: bridge-gateway-proxy-port Online documentation Install APIM on Kubernetes with the Helm Chart Deploy a Hybrid architecture in Kubernetes Gravitee.io Helm Charts docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 version : '3.5' services : gateway : image : graviteeio/apim-gateway:${APIM_VERSION:-3.18.3} container_name : gio_apim_gateway restart : always ports : - \"8082:8082\" environment : # --- BRIDGE GATEWAYS --- - gravitee_management_type=http - gravitee_management_http_url=https://bridge-gateway-url:bridge-gateway-port - gravitee_management_http_authentication_basic_username=bridge-gateway-username - gravitee_management_http_authentication_basic_password=bridge-gateway-password # - gravitee_management_http_proxy_host=bridge-gateway-proxy-host # - gravitee_management_http_proxy_port=bridge-gateway-proxy-port Into the gravitee.yml configuration file : gravitee.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 management : type : http http : url : https://bridge-gateway-url:bridge-gateway-port keepAlive : true idleTimeout : 30000 connectTimeout : 10000 authentication : basic : username : bridge-gateway-username password : bridge-gateway-password proxy : host : bridge-gateway-proxy-host port : bridge-gateway-proxy-port ssl : trustAll : true verifyHostname : true keystore : type : # can be jks / pem / pkcs12 path : password : trustore : type : # can be jks / pem / pkcs12 path : password : Online documentation APIM hybrid deployment Analytics and Logs \u00b6 Kubernetes (Helm) Docker Gateway with gravitee.yml file Files \u00b6 Into the values.yaml configuration file : values.yaml 1 2 3 4 5 6 7 gateway : reporters : tcp : enabled : true host : logstash port : 8379 output : elasticsearch Direct (TCP) \u00b6 Warning Choosing the direct connection may result in a loss of data. If the connection between the gateway and logstash is broken the newly generated analytics and logs data will be lost. Into the values.yaml configuration file : values.yaml 1 2 3 4 5 6 7 gateway : reporters : tcp : enabled : true host : logstash port : 8379 output : elasticsearch Online documentation APIM hybrid deployment Full values.yaml example docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 version : '3.5' services : gateway : image : graviteeio/apim-gateway:${APIM_VERSION:-3.18.3} container_name : gio_apim_gateway restart : always ports : - \"8082:8082\" environment : # --- LOGSTASH --- - gravitee_reporters_elasticsearch_enabled=false - gravitee_reportealert-engine-usernamers_tcp_enabled=true - gravitee_reporters_tcp_host=logstash - gravitee_reporters_tcp_port=8379 - gravitee_reporters_tcp_output=elasticsearch gravitee.yml 1 2 3 4 5 6 7 8 reporters : elasticsearch : enabled : false # Is the reporter enabled or not (default to true) tcp : enabled : true host : logstash-host port : logstash-port output : elasticsearch Rate limits \u00b6 Kubernetes (Helm) Docker Gateway with gravitee.yml file values.yaml 1 2 3 4 5 6 7 8 ratelimit : type : redis management : ratelimit : redis : host : redis-host port : 6379 password : redis-password Online documentation APIM hybrid deployment Full values.yaml example docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 version : '3.5' services : gateway : image : graviteeio/apim-gateway:${APIM_VERSION:-3.18.3} container_name : gio_apim_gateway restart : always ports : - \"8082:8082\" environment : # --- RATE LIMIT REPO --- - gravitee_ratelimit_type=redis - gravitee_ratelimit_redis_host=redis-host - gravitee_ratelimit_redis_port=6379 - gravitee_ratelimit_redis_password=${REDIS_PASS:-redis-password} gravitee.yml 1 2 3 4 5 6 7 ratelimit : # type: hazelcast type : redis redis : host : redis-host port : 6379 password : redis-password Alert Engine \u00b6 Kubernetes (Helm) Docker Gateway with gravitee.yml file Into the values.yaml configuration file : values.yaml 1 2 3 4 5 6 7 8 alerts : enabled : true endpoints : - https://alert-engine-url:alert-engine-port security : enabled : true username : alert-engine-username password : alert-engine-password Online documentation Integrate AE with API Management Install APIM on Kubernetes with the Helm Chart Deploy a Hybrid architecture in Kubernetes Gravitee.io Helm Charts docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 version : '3.5' services : gateway : image : graviteeio/apim-gateway:${APIM_VERSION:-3.18.3} container_name : gio_apim_gateway restart : always ports : - \"8082:8082\" environment : # --- ALERT ENGINE --- - gravitee_alerts_alertengine_enabled=true - gravitee_alerts_alertengine_ws_discovery=true - gravitee_alerts_alertengine_ws_endpoints_0=https://alert-engine-url:alert-engine-port - gravitee_alerts_alertengine_ws_security_username=alert-engine-username - gravitee_alerts_alertengine_ws_security_password=alert-engine-password gravitee.yml 1 2 3 4 5 6 7 8 9 10 alerts : alert-engine : enabled : true ws : discovery : true endpoints : - https://alert-engine-url:alert-engine-port security : username : alert-engine-username password : alert-engine-password Full example \u00b6 Kubernetes (Helm) Docker (VMs) Gateway with gravitee.yml file Into the values.yaml configuration file : values.yaml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 management : type : http gateway : management : http : url : https://bridge-gateway-url:bridge-gateway-port username : kubernetes://<namespace>/secrets/<my-secret-name>/<my-secret-key> password : kubernetes://<namespace>/secrets/<my-secret-name>/<my-secret-key> reporters : elasticsearch : enabled : false tcp : enabled : true host : gravitee-logstash port : 8379 output : elasticsearch ratelimit : redis : host : gravitee-redis-master port : 6379 password : redis-password ratelimit : type : redis alerts : enabled : true endpoints : - https://alert-engine-url:alert-engine-port security : enabled : true username : alert-engine-username password : alert-engine-password api : enabled : false portal : enabled : false ui : enabled : false # For enterprise plugin only, you will need a license # license: # name: licensekey Online documentation Install APIM on Kubernetes with the Helm Chart Deploy a Hybrid architecture in Kubernetes Gravitee.io Helm Charts - Values Template docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 version : '3.5' services : gateway : image : graviteeio/apim-gateway:${APIM_VERSION:-3.18.3} container_name : gio_apim_gateway restart : always ports : - \"8082:8082\" depends_on : - rate-limit - logstash volumes : # --- LOCAL LOG FILES --- - ./logs/apim-gateway-dev:/opt/graviteeio-gateway/logs # --- EE LICENSE FILE --- # - ${GIO_LICENSE}:/opt/graviteeio-gateway/license/license.key # --- ADDITIONAL PLUGINS --- - ./plugins:/opt/graviteeio-gateway/plugins-ext - ./config/gateway/gravitee.yml:/opt/graviteeio-gateway/config/gravitee.yml:ro environment : # --- PLUGINS LOCATIONS --- - gravitee_plugins_path_0=/opt/graviteeio-gateway/plugins - gravitee_plugins_path_1=/opt/graviteeio-gateway/plugins-ext # --- COCKPIT ORGS & ENVS --- - gravitee_organizations=dorian-se - gravitee_environments=dev # --- SHARDING TAGS & TENANTS --- - gravitee_tags=internal # - gravitee_tenant=xxx # --- BRIDGE GATEWAYS --- - gravitee_management_type=http - gravitee_management_http_url=https://bridge-gateway-url:bridge-gateway-port - gravitee_management_http_authentication_basic_username=bridge-gateway-username - gravitee_management_http_authentication_basic_password=bridge-gateway-password # --- RATE LIMIT REPO --- - gravitee_ratelimit_type=redis - gravitee_ratelimit_redis_host=rate-limit - gravitee_ratelimit_redis_port=6379 - gravitee_ratelimit_redis_password=${REDIS_PASS:-redis-password} # - gravitee_ratelimit_type=hazelcast # --- LOGSTASH --- - gravitee_reporters_elasticsearch_enabled=false - gravitee_reportealert-engine-usernamers_tcp_enabled=true - gravitee_reporters_tcp_host=logstash - gravitee_reporters_tcp_port=8379 - gravitee_reporters_tcp_output=elasticsearch # --- ALERT ENGINE --- # - gravitee_alerts_alertengine_enabled=true # - gravitee_alerts_alertengine_ws_discovery=true # - gravitee_alerts_alertengine_ws_endpoints_0=https://alert-engine-url:alert-engine-port # - gravitee_alerts_alertengine_ws_security_username=alert-engine-username # - gravitee_alerts_alertengine_ws_security_password=alert-engine-password # --- SECRETS --- - gravitee_api_properties_encryption_secret=your-own-api-32-caracters-secret rate-limit : # https://hub.docker.com/_/redis?tab=tags image : redis:${REDIS_VERSION:-7.0.4-alpine3.16} container_name : gio_ratelimit_redis hostname : redis restart : always ports : - '6379:6379' command : redis-server --requirepass ${REDIS_PASS:-redis-password} volumes : - redis_data:/data logstash : # https://www.docker.elastic.co/r/logstash/logstash-oss image : docker.elastic.co/logstash/logstash-oss:8.3.2 ports : - \"8379:8379\" volumes : - ./config/logstash:/usr/share/logstash/pipeline:ro environment : LS_JAVA_OPTS : \"-Xmx256m -Xms256m\" volumes : redis_data : driver : local gravitee.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 ############################################################################################################ #################################### Gravitee.IO Gateway - Configuration ################################### ############################################################################################################ ############################################################################################################ # This file is the general configuration of Gravitee.IO Gateway: # - Properties (and respective default values) in comment are provided for information. # - You can reference other property by using ${property.name} syntax # - gravitee.home property is automatically set-up by launcher and refers to the installation path. Do not override it ! # # Please have a look to http://docs.gravitee.io/ for more options and fine-grained granularity ############################################################################################################ organizations : cockpit-org-hrid environments : cockpit-env-hrid tags : your, sharding, tags #example: internal plugins : path : - /opt/graviteeio-gateway/plugins - /opt/graviteeio-gateway/plugins-ext management : type : http http : url : https://bridge-gateway-url:bridge-gateway-port authentication : basic : username : bridge-gateway-username password : bridge-gateway-password ratelimit : # type: hazelcast type : redis redis : host : redis-host port : 6379 password : redis-password cache : type : ehcache reporters : elasticsearch : enabled : false # Is the reporter enabled or not (default to true) tcp : enabled : true host : logstash-host port : logstash-port output : elasticsearch services : core : http : enabled : true port : 18082 host : localhost authentication : type : basic users : admin : internal-api-password sync : delay : 5000 unit : MILLISECONDS distributed : false # By enabling this mode, data synchronization process is distributed over clustered API gateways. bulk_items : 100 # Defines the number of items to retrieve during synchronization (events, plans, api keys, ...). local : enabled : false path : ${gravitee.home}/apis # The path to API descriptors monitoring : delay : 5000 unit : MILLISECONDS distributed : false # By enabling this mode, data monitoring gathering process is distributed over clustered API gateways. metrics : enabled : false prometheus : enabled : true tracing : enabled : false api : properties : encryption : secret : your-own-api-32-caracters-secret alerts : alert-engine : enabled : true ws : discovery : true endpoints : - https://alert-engine-url:alert-engine-port security : username : alert-engine-username password : alert-engine-password classloader : legacy : enabled : false Redis \u00b6 Installation \u00b6 Kubernetes (Helm) Docker VM Bitnami helm charts Redis Bitnami helm charts TL;DR helm repo add redis https://charts.bitnami.com/bitnami helm install gravitee-redis redis/redis \\ --set architecture = standalone \\ --create-namespace \\ --namespace gravitee-apim Get the generated redis password echo $(kubectl get secret --namespace gravitee-apim gravitee-redis -o jsonpath=\"{.data.redis-password}\" | base64 -d) Production Architecture Redis Bitnami Cluster topologies to go \"Master-Replicas\" or \"Master-Replicas with Sentinel\" docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 version : '3.5' services : rate-limit : # https://hub.docker.com/_/redis?tab=tags image : redis:${REDIS_VERSION:-7.0.5-alpine3.17} container_name : gio_ratelimit_redis hostname : redis restart : always ports : - '6379:6379' command : redis-server --requirepass ${REDIS_PASS:-redis-password} volumes : - redis_data:/data volumes : redis_data : driver : local Installing Redis from redis.io Configuration \u00b6 Easy peasy No specific configuration is needed. Logstash \u00b6 Installation \u00b6 Kubernetes (Helm) Docker VM Helm charts Official helm charts Logstash Bitnami helm charts TL;DR using the official helm chart helm repo add elastic https://helm.elastic.co helm install gravitee-logstash elastic/logstash \\ --create-namespace \\ --namespace gravitee-apim \\ -f values.yaml docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11 12 version : '3.5' services : logstash : # https://www.docker.elastic.co/r/logstash/logstash-oss image : docker.elastic.co/logstash/logstash-oss:8.3.2 ports : - \"8379:8379\" volumes : - ./config/logstash:/usr/share/logstash/pipeline:ro environment : LS_JAVA_OPTS : \"-Xmx256m -Xms256m\" Download Logstash OSS Configuration \u00b6 Kubernetes (Helm) logstash.conf Helm charts Official values.yml values.yaml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 logstashPipeline : logstash.conf : | input { tcp { port => 8379 codec => \"json\" } } filter { if [type] != \"request\" { mutate { remove_field => [\"path\", \"host\"] } } } output { s3 { access_key_id => \"${S3_ACEESS_KEY_ID}\" secret_access_key => \"${S3_SECRET_ACCESS_KEY}\" region => \"${S3_REGION}\" bucket => \"${S3_BUCKET_NAME}\" size_file => 10485760 codec => \"json_lines\" } } fullnameOverride : gravitee-logstash extraPorts : - name : tcp-input containerPort : 8379 service : type : ClusterIP ports : - name : tcp-input port : 8379 protocol : TCP targetPort : 8379 logstash.conf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 input { tcp { port => 8379 codec => \"json\" } } filter { if [type] != \"request\" { mutate { remove_field => [\"path\", \"host\"] } } } output { s3 { access_key_id => \"${S3_ACEESS_KEY_ID}\" secret_access_key => \"${S3_SECRET_ACCESS_KEY}\" region => \"${S3_REGION}\" bucket => \"${S3_BUCKET_NAME}\" size_file => 10485760 codec => \"json_lines\" } } Online documentation Configuring Logstash","title":"Hybrid"},{"location":"api-management/install/hybrid/#apim-hybrid-deployment-guide","text":"Introduction This documentation page relates to the installation of the client (On-Prem / Private Cloud) part of the API Management platform in a Hybrid architecture (SaaS + On-prem / Private cloud).","title":"APIm Hybrid Deployment Guide"},{"location":"api-management/install/hybrid/#architecture","text":"Architecture You can find all architecture information (components descriptions, diagrams) in the architecture section .","title":"Architecture"},{"location":"api-management/install/hybrid/#hybrid-architecture-self-hosted-hybrid-gateway","text":"","title":"Hybrid Architecture Self-Hosted (Hybrid) gateway"},{"location":"api-management/install/hybrid/#installation","text":"Kubernetes (Helm) Docker Binaries Online documentation and assets Install APIM on Kubernetes with the Helm Chart Deploy a Hybrid architecture in Kubernetes Gravitee.io Helm Charts Prerequisites Kubectl Helm v3 Steps : Add the Gravitee.io Helm charts repository. helm repo add graviteeio https://helm.gravitee.io Install using the values.yaml file. Here is the full values.yaml example , please customize it following the Configuration sections . helm install graviteeio-apim3x graviteeio/apim3 \\ --create-namespace \\ --namespace gravitee-apim \\ -f values.yaml Enterprise License If you are using enterprise plugins, you have to install a license file. Please chose one of these options Add the license.key in the values.yml file Add a helm install command parameter --set license.key= and provide the B64 encoded license : linux: base64 -w 0 license.key macOS: base64 license.key windows (certutil): certutil -encode license.key tmp.b64 && findstr /v /c:- tmp.b64 > license.b64 && del tmp.b64 and copy the context of the license.b64 generated file. Online documentation APIM Docker installation Local file structure . \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 gateway \u2502 \u2502 \u2514\u2500\u2500 gravitee.yml # (1) \u2502 \u2514\u2500\u2500 logstash \u2502 \u2514\u2500\u2500 logstash.conf # (2) \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 logs \u2502 \u2514\u2500\u2500 apim-gateway-dev \u2514\u2500\u2500 plugins # (3) \u251c\u2500\u2500 gravitee-apim-repository-hazelcast-3.18.3.zip \u2514\u2500\u2500 gravitee-apim-repository-redis-3.18.3.zip If you prefer to override the default gravitee.yml configuration file, instead of using the environement variables in the docker-compose.yml file. Logstash configuration file . Additional plugins location. Download plugins gravitee-apim-repository-redis-3.18.3.zip gravitee-apim-repository-hazelcast-3.18.3.zip Download plugins gravitee-apim-repository-redis-3.18.3.zip Online documentation APIM VMs installation","title":"Installation"},{"location":"api-management/install/hybrid/#configuration","text":"There is at least 3 connections to configure : The connection to the SaaS Management plane with the Bridge Gateway. The connection to push Analytics and Logs with file or tcp reporter pushing data for logstash to send them to the SaaS storage. The connection the local rate limits database. [Optional] The connection to the SaaS Alert Engine.","title":"Configuration"},{"location":"api-management/install/hybrid/#management","text":"Kubernetes (Helm) Docker Gateway with gravitee.yml file Into the values.yaml configuration file : values.yaml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 management : type : http gateway : management : http : url : https://bridge-gateway-url:bridge-gateway-port username : kubernetes://<namespace>/secrets/<my-secret-name>/<my-secret-key> password : kubernetes://<namespace>/secrets/<my-secret-name>/<my-secret-key> # ssl: # trustall: true # verifyHostname: true # keystore: # type: jks # Supports jks, pem, pkcs12 # path: ${gravitee.home}/security/keystore.jks # password: secret # truststore: # type: jks # Supports jks, pem, pkcs12 # path: ${gravitee.home}/security/truststore.jks # password: secret # proxy: # host: bridge-gateway-proxy-host # port: bridge-gateway-proxy-port Online documentation Install APIM on Kubernetes with the Helm Chart Deploy a Hybrid architecture in Kubernetes Gravitee.io Helm Charts docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 version : '3.5' services : gateway : image : graviteeio/apim-gateway:${APIM_VERSION:-3.18.3} container_name : gio_apim_gateway restart : always ports : - \"8082:8082\" environment : # --- BRIDGE GATEWAYS --- - gravitee_management_type=http - gravitee_management_http_url=https://bridge-gateway-url:bridge-gateway-port - gravitee_management_http_authentication_basic_username=bridge-gateway-username - gravitee_management_http_authentication_basic_password=bridge-gateway-password # - gravitee_management_http_proxy_host=bridge-gateway-proxy-host # - gravitee_management_http_proxy_port=bridge-gateway-proxy-port Into the gravitee.yml configuration file : gravitee.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 management : type : http http : url : https://bridge-gateway-url:bridge-gateway-port keepAlive : true idleTimeout : 30000 connectTimeout : 10000 authentication : basic : username : bridge-gateway-username password : bridge-gateway-password proxy : host : bridge-gateway-proxy-host port : bridge-gateway-proxy-port ssl : trustAll : true verifyHostname : true keystore : type : # can be jks / pem / pkcs12 path : password : trustore : type : # can be jks / pem / pkcs12 path : password : Online documentation APIM hybrid deployment","title":"Management"},{"location":"api-management/install/hybrid/#analytics-and-logs","text":"Kubernetes (Helm) Docker Gateway with gravitee.yml file","title":"Analytics and Logs"},{"location":"api-management/install/hybrid/#rate-limits","text":"Kubernetes (Helm) Docker Gateway with gravitee.yml file values.yaml 1 2 3 4 5 6 7 8 ratelimit : type : redis management : ratelimit : redis : host : redis-host port : 6379 password : redis-password Online documentation APIM hybrid deployment Full values.yaml example docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 version : '3.5' services : gateway : image : graviteeio/apim-gateway:${APIM_VERSION:-3.18.3} container_name : gio_apim_gateway restart : always ports : - \"8082:8082\" environment : # --- RATE LIMIT REPO --- - gravitee_ratelimit_type=redis - gravitee_ratelimit_redis_host=redis-host - gravitee_ratelimit_redis_port=6379 - gravitee_ratelimit_redis_password=${REDIS_PASS:-redis-password} gravitee.yml 1 2 3 4 5 6 7 ratelimit : # type: hazelcast type : redis redis : host : redis-host port : 6379 password : redis-password","title":"Rate limits"},{"location":"api-management/install/hybrid/#alert-engine","text":"Kubernetes (Helm) Docker Gateway with gravitee.yml file Into the values.yaml configuration file : values.yaml 1 2 3 4 5 6 7 8 alerts : enabled : true endpoints : - https://alert-engine-url:alert-engine-port security : enabled : true username : alert-engine-username password : alert-engine-password Online documentation Integrate AE with API Management Install APIM on Kubernetes with the Helm Chart Deploy a Hybrid architecture in Kubernetes Gravitee.io Helm Charts docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 version : '3.5' services : gateway : image : graviteeio/apim-gateway:${APIM_VERSION:-3.18.3} container_name : gio_apim_gateway restart : always ports : - \"8082:8082\" environment : # --- ALERT ENGINE --- - gravitee_alerts_alertengine_enabled=true - gravitee_alerts_alertengine_ws_discovery=true - gravitee_alerts_alertengine_ws_endpoints_0=https://alert-engine-url:alert-engine-port - gravitee_alerts_alertengine_ws_security_username=alert-engine-username - gravitee_alerts_alertengine_ws_security_password=alert-engine-password gravitee.yml 1 2 3 4 5 6 7 8 9 10 alerts : alert-engine : enabled : true ws : discovery : true endpoints : - https://alert-engine-url:alert-engine-port security : username : alert-engine-username password : alert-engine-password","title":"Alert Engine"},{"location":"api-management/install/hybrid/#full-example","text":"Kubernetes (Helm) Docker (VMs) Gateway with gravitee.yml file Into the values.yaml configuration file : values.yaml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 management : type : http gateway : management : http : url : https://bridge-gateway-url:bridge-gateway-port username : kubernetes://<namespace>/secrets/<my-secret-name>/<my-secret-key> password : kubernetes://<namespace>/secrets/<my-secret-name>/<my-secret-key> reporters : elasticsearch : enabled : false tcp : enabled : true host : gravitee-logstash port : 8379 output : elasticsearch ratelimit : redis : host : gravitee-redis-master port : 6379 password : redis-password ratelimit : type : redis alerts : enabled : true endpoints : - https://alert-engine-url:alert-engine-port security : enabled : true username : alert-engine-username password : alert-engine-password api : enabled : false portal : enabled : false ui : enabled : false # For enterprise plugin only, you will need a license # license: # name: licensekey Online documentation Install APIM on Kubernetes with the Helm Chart Deploy a Hybrid architecture in Kubernetes Gravitee.io Helm Charts - Values Template docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 version : '3.5' services : gateway : image : graviteeio/apim-gateway:${APIM_VERSION:-3.18.3} container_name : gio_apim_gateway restart : always ports : - \"8082:8082\" depends_on : - rate-limit - logstash volumes : # --- LOCAL LOG FILES --- - ./logs/apim-gateway-dev:/opt/graviteeio-gateway/logs # --- EE LICENSE FILE --- # - ${GIO_LICENSE}:/opt/graviteeio-gateway/license/license.key # --- ADDITIONAL PLUGINS --- - ./plugins:/opt/graviteeio-gateway/plugins-ext - ./config/gateway/gravitee.yml:/opt/graviteeio-gateway/config/gravitee.yml:ro environment : # --- PLUGINS LOCATIONS --- - gravitee_plugins_path_0=/opt/graviteeio-gateway/plugins - gravitee_plugins_path_1=/opt/graviteeio-gateway/plugins-ext # --- COCKPIT ORGS & ENVS --- - gravitee_organizations=dorian-se - gravitee_environments=dev # --- SHARDING TAGS & TENANTS --- - gravitee_tags=internal # - gravitee_tenant=xxx # --- BRIDGE GATEWAYS --- - gravitee_management_type=http - gravitee_management_http_url=https://bridge-gateway-url:bridge-gateway-port - gravitee_management_http_authentication_basic_username=bridge-gateway-username - gravitee_management_http_authentication_basic_password=bridge-gateway-password # --- RATE LIMIT REPO --- - gravitee_ratelimit_type=redis - gravitee_ratelimit_redis_host=rate-limit - gravitee_ratelimit_redis_port=6379 - gravitee_ratelimit_redis_password=${REDIS_PASS:-redis-password} # - gravitee_ratelimit_type=hazelcast # --- LOGSTASH --- - gravitee_reporters_elasticsearch_enabled=false - gravitee_reportealert-engine-usernamers_tcp_enabled=true - gravitee_reporters_tcp_host=logstash - gravitee_reporters_tcp_port=8379 - gravitee_reporters_tcp_output=elasticsearch # --- ALERT ENGINE --- # - gravitee_alerts_alertengine_enabled=true # - gravitee_alerts_alertengine_ws_discovery=true # - gravitee_alerts_alertengine_ws_endpoints_0=https://alert-engine-url:alert-engine-port # - gravitee_alerts_alertengine_ws_security_username=alert-engine-username # - gravitee_alerts_alertengine_ws_security_password=alert-engine-password # --- SECRETS --- - gravitee_api_properties_encryption_secret=your-own-api-32-caracters-secret rate-limit : # https://hub.docker.com/_/redis?tab=tags image : redis:${REDIS_VERSION:-7.0.4-alpine3.16} container_name : gio_ratelimit_redis hostname : redis restart : always ports : - '6379:6379' command : redis-server --requirepass ${REDIS_PASS:-redis-password} volumes : - redis_data:/data logstash : # https://www.docker.elastic.co/r/logstash/logstash-oss image : docker.elastic.co/logstash/logstash-oss:8.3.2 ports : - \"8379:8379\" volumes : - ./config/logstash:/usr/share/logstash/pipeline:ro environment : LS_JAVA_OPTS : \"-Xmx256m -Xms256m\" volumes : redis_data : driver : local gravitee.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 ############################################################################################################ #################################### Gravitee.IO Gateway - Configuration ################################### ############################################################################################################ ############################################################################################################ # This file is the general configuration of Gravitee.IO Gateway: # - Properties (and respective default values) in comment are provided for information. # - You can reference other property by using ${property.name} syntax # - gravitee.home property is automatically set-up by launcher and refers to the installation path. Do not override it ! # # Please have a look to http://docs.gravitee.io/ for more options and fine-grained granularity ############################################################################################################ organizations : cockpit-org-hrid environments : cockpit-env-hrid tags : your, sharding, tags #example: internal plugins : path : - /opt/graviteeio-gateway/plugins - /opt/graviteeio-gateway/plugins-ext management : type : http http : url : https://bridge-gateway-url:bridge-gateway-port authentication : basic : username : bridge-gateway-username password : bridge-gateway-password ratelimit : # type: hazelcast type : redis redis : host : redis-host port : 6379 password : redis-password cache : type : ehcache reporters : elasticsearch : enabled : false # Is the reporter enabled or not (default to true) tcp : enabled : true host : logstash-host port : logstash-port output : elasticsearch services : core : http : enabled : true port : 18082 host : localhost authentication : type : basic users : admin : internal-api-password sync : delay : 5000 unit : MILLISECONDS distributed : false # By enabling this mode, data synchronization process is distributed over clustered API gateways. bulk_items : 100 # Defines the number of items to retrieve during synchronization (events, plans, api keys, ...). local : enabled : false path : ${gravitee.home}/apis # The path to API descriptors monitoring : delay : 5000 unit : MILLISECONDS distributed : false # By enabling this mode, data monitoring gathering process is distributed over clustered API gateways. metrics : enabled : false prometheus : enabled : true tracing : enabled : false api : properties : encryption : secret : your-own-api-32-caracters-secret alerts : alert-engine : enabled : true ws : discovery : true endpoints : - https://alert-engine-url:alert-engine-port security : username : alert-engine-username password : alert-engine-password classloader : legacy : enabled : false","title":"Full example"},{"location":"api-management/install/hybrid/#redis","text":"","title":"Redis"},{"location":"api-management/install/hybrid/#installation_1","text":"Kubernetes (Helm) Docker VM Bitnami helm charts Redis Bitnami helm charts TL;DR helm repo add redis https://charts.bitnami.com/bitnami helm install gravitee-redis redis/redis \\ --set architecture = standalone \\ --create-namespace \\ --namespace gravitee-apim Get the generated redis password echo $(kubectl get secret --namespace gravitee-apim gravitee-redis -o jsonpath=\"{.data.redis-password}\" | base64 -d) Production Architecture Redis Bitnami Cluster topologies to go \"Master-Replicas\" or \"Master-Replicas with Sentinel\" docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 version : '3.5' services : rate-limit : # https://hub.docker.com/_/redis?tab=tags image : redis:${REDIS_VERSION:-7.0.5-alpine3.17} container_name : gio_ratelimit_redis hostname : redis restart : always ports : - '6379:6379' command : redis-server --requirepass ${REDIS_PASS:-redis-password} volumes : - redis_data:/data volumes : redis_data : driver : local Installing Redis from redis.io","title":"Installation"},{"location":"api-management/install/hybrid/#configuration_1","text":"Easy peasy No specific configuration is needed.","title":"Configuration"},{"location":"api-management/install/hybrid/#logstash","text":"","title":"Logstash"},{"location":"api-management/install/hybrid/#installation_2","text":"Kubernetes (Helm) Docker VM Helm charts Official helm charts Logstash Bitnami helm charts TL;DR using the official helm chart helm repo add elastic https://helm.elastic.co helm install gravitee-logstash elastic/logstash \\ --create-namespace \\ --namespace gravitee-apim \\ -f values.yaml docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11 12 version : '3.5' services : logstash : # https://www.docker.elastic.co/r/logstash/logstash-oss image : docker.elastic.co/logstash/logstash-oss:8.3.2 ports : - \"8379:8379\" volumes : - ./config/logstash:/usr/share/logstash/pipeline:ro environment : LS_JAVA_OPTS : \"-Xmx256m -Xms256m\" Download Logstash OSS","title":"Installation"},{"location":"api-management/install/hybrid/#configuration_2","text":"Kubernetes (Helm) logstash.conf Helm charts Official values.yml values.yaml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 logstashPipeline : logstash.conf : | input { tcp { port => 8379 codec => \"json\" } } filter { if [type] != \"request\" { mutate { remove_field => [\"path\", \"host\"] } } } output { s3 { access_key_id => \"${S3_ACEESS_KEY_ID}\" secret_access_key => \"${S3_SECRET_ACCESS_KEY}\" region => \"${S3_REGION}\" bucket => \"${S3_BUCKET_NAME}\" size_file => 10485760 codec => \"json_lines\" } } fullnameOverride : gravitee-logstash extraPorts : - name : tcp-input containerPort : 8379 service : type : ClusterIP ports : - name : tcp-input port : 8379 protocol : TCP targetPort : 8379 logstash.conf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 input { tcp { port => 8379 codec => \"json\" } } filter { if [type] != \"request\" { mutate { remove_field => [\"path\", \"host\"] } } } output { s3 { access_key_id => \"${S3_ACEESS_KEY_ID}\" secret_access_key => \"${S3_SECRET_ACCESS_KEY}\" region => \"${S3_REGION}\" bucket => \"${S3_BUCKET_NAME}\" size_file => 10485760 codec => \"json_lines\" } } Online documentation Configuring Logstash","title":"Configuration"},{"location":"api-management/install/reference-architecture/","tags":["Architecture"],"text":"Gravitee.io API Management Reference Architecture \u00b6 Architecture \u00b6 Architecture You can find all architecture information (components descriptions, diagrams) in the architecture section . Production Best Practices \u00b6 High Availability : increasing resilience and uptime \u00b6 The 3 Main Principles to reduce scheduled and unscheduled downtime : Elimination of single points of failure (SPOF) \u2192 Adding redundancy by running at least 2 G.io APIm gateways and 2 Alert engine instances Reliable crossover \u2192 Reliable load-balancer in front of G.io APIm gateways (Nginx, HAproxy, F5, Traefik, Squid, Kemp, LinuxHA, \u2026). Detection of failures as they occur \u2192 Active monitoring of G.io APIm gateways. 1. Elimination of single points of failure \u00b6 Adding redundancy by running at least 2 G.io APIm gateways and 2 Alert engine instances in Active/Active or Active/Passive mode. Installation on VMs (If you're installing in VMs) Use dedicated VMs for the gateways and alert engine instances. 2. Reliable crossover \u00b6 Use a reliable load-balancer in front of G.io APIm gateways (Nginx, HAproxy, F5, Traefik, Squid, Kemp, LinuxHA, \u2026) and Active or Passive health checks. Active health checks Passive health checks (circuit breakers) Re-enable a backend Active health checks can automatically re-enable a backend in the backend group as soon as it is healthy again. Passive health checks cannot. Additional traffic Active health checks do produce additional traffic to the target. Passive health checks do not produce additional traffic to the target. Probe endpoint An active health checker demands a known URL with a reliable status response in the backend to be configured as a request endpoint (which may be as simple as \"/\"). By providing a custom probe endpoint for an active health checker, an backend may determine its own health metrics and produce a status code to be consumed by Gravitee. Even though a target continues to serve traffic which looks healthy to the passive health checker, it would be able to respond to the active probe with a failure status, essentially requesting to be relieved from taking new traffic. Passive health checks do not demand such configuration. 3. Detection of failures as they occur \u00b6 Active monitoring of G.io APIm gateways and mAPI health using : Gateway internal API , a RESTful endpoint to get node status : GET /_node : Gets generic node information : version, revision, name, \u2026 GET /_node/health?probes=#probe1,... : Gets the health status. Probes can be filtered using the optional probes query param. GET /_node/monitor : Gets monitoring information from the JVM and the server. GET /_node/apis : Gets the APIs deployed and their config on this APIM Gateway instance. An API with mock policy to perform active health checks. Prometheus to expose metrics : (/_node/metrics/prometheus), to get Vert.x 4 metrics (customizables with labels) OpenTracing with Jaeger to trace every request that comes through the APIM Gateway. Creating a deep level of insight on API policies and making debugging a cinch. Capacity Planning \u00b6 Storage \u00b6 Storage is mostly a concern at the analytics database level and depends on : The architecture requirements (redundancy, backups) The APIs configurations (are advanced logs activated on requests and responses payloads especially) The APIs rate (RPS : Requests Per Second) The APIs payload sizes Avoid systematic advanced logs on all APIs requests and responses If you have activated the advanced logs on requests and responses payloads, with an average (requests + responses) payload size of 10kB, and you have 10 RPS, and you want to keep the logs for 6 months, it will take 1.5 TB of storage. It might be fine for some use cases, but keep in mind that activating the advanced logs on all API requests and responses will generate a lot of data and reduce the gateway capacities as well. Memory \u00b6 Memory is highly dependent on use cases. The more APIs you will have that load payloads in memory (encryption policy, payload transformation, advanced logs, ...) the more the memory consumption will increase. CPU \u00b6 The CPU load is directly related to the API traffic. It is the metric to follow to evaluate the load level of the gateways and the one to use to determine the horizontal scalability (CPU > 75% for example) Hardware recommendations for self-hosted deployment \u00b6 Component vCPU RAM (GB) Disk (Go) Dev Portal + REST API (dev portal only) 1 2 20 Console + REST API (console only) 1 2 20 Dev Portal + Console + REST API 2 4 20 APIm Gateway instance Production best practice (HA) is 2 nodes 0.25 - 4 512 MB - 8 20 Alert Engine instance Production best practice (HA) is 2 nodes 0.25 - 4 512 MB - 8 20 Analytics DB instance (ElasticSearch) Production best practice is 3 nodes Offical hardware recommendations 1 - 8 2 - 8 or more 20 + 0.5 per million requests for default metrics Config DB instance (MongoDB or JDBC DB) Production best practice is 3 nodes 1 2 30 Rate Limit DB instance (Redis) Production best practice is 3 nodes 2 4 20","title":"Reference Architecture"},{"location":"api-management/install/reference-architecture/#graviteeio-api-management-reference-architecture","text":"","title":"Gravitee.io API Management Reference Architecture"},{"location":"api-management/install/reference-architecture/#architecture","text":"Architecture You can find all architecture information (components descriptions, diagrams) in the architecture section .","title":"Architecture"},{"location":"api-management/install/reference-architecture/#production-best-practices","text":"","title":"Production Best Practices"},{"location":"api-management/install/reference-architecture/#high-availability-increasing-resilience-and-uptime","text":"The 3 Main Principles to reduce scheduled and unscheduled downtime : Elimination of single points of failure (SPOF) \u2192 Adding redundancy by running at least 2 G.io APIm gateways and 2 Alert engine instances Reliable crossover \u2192 Reliable load-balancer in front of G.io APIm gateways (Nginx, HAproxy, F5, Traefik, Squid, Kemp, LinuxHA, \u2026). Detection of failures as they occur \u2192 Active monitoring of G.io APIm gateways.","title":"High Availability : increasing resilience and uptime"},{"location":"api-management/install/reference-architecture/#1-elimination-of-single-points-of-failure","text":"Adding redundancy by running at least 2 G.io APIm gateways and 2 Alert engine instances in Active/Active or Active/Passive mode. Installation on VMs (If you're installing in VMs) Use dedicated VMs for the gateways and alert engine instances.","title":"1. Elimination of single points of failure"},{"location":"api-management/install/reference-architecture/#2-reliable-crossover","text":"Use a reliable load-balancer in front of G.io APIm gateways (Nginx, HAproxy, F5, Traefik, Squid, Kemp, LinuxHA, \u2026) and Active or Passive health checks. Active health checks Passive health checks (circuit breakers) Re-enable a backend Active health checks can automatically re-enable a backend in the backend group as soon as it is healthy again. Passive health checks cannot. Additional traffic Active health checks do produce additional traffic to the target. Passive health checks do not produce additional traffic to the target. Probe endpoint An active health checker demands a known URL with a reliable status response in the backend to be configured as a request endpoint (which may be as simple as \"/\"). By providing a custom probe endpoint for an active health checker, an backend may determine its own health metrics and produce a status code to be consumed by Gravitee. Even though a target continues to serve traffic which looks healthy to the passive health checker, it would be able to respond to the active probe with a failure status, essentially requesting to be relieved from taking new traffic. Passive health checks do not demand such configuration.","title":"2. Reliable crossover"},{"location":"api-management/install/reference-architecture/#3-detection-of-failures-as-they-occur","text":"Active monitoring of G.io APIm gateways and mAPI health using : Gateway internal API , a RESTful endpoint to get node status : GET /_node : Gets generic node information : version, revision, name, \u2026 GET /_node/health?probes=#probe1,... : Gets the health status. Probes can be filtered using the optional probes query param. GET /_node/monitor : Gets monitoring information from the JVM and the server. GET /_node/apis : Gets the APIs deployed and their config on this APIM Gateway instance. An API with mock policy to perform active health checks. Prometheus to expose metrics : (/_node/metrics/prometheus), to get Vert.x 4 metrics (customizables with labels) OpenTracing with Jaeger to trace every request that comes through the APIM Gateway. Creating a deep level of insight on API policies and making debugging a cinch.","title":"3. Detection of failures as they occur"},{"location":"api-management/install/reference-architecture/#capacity-planning","text":"","title":"Capacity Planning"},{"location":"api-management/install/reference-architecture/#storage","text":"Storage is mostly a concern at the analytics database level and depends on : The architecture requirements (redundancy, backups) The APIs configurations (are advanced logs activated on requests and responses payloads especially) The APIs rate (RPS : Requests Per Second) The APIs payload sizes Avoid systematic advanced logs on all APIs requests and responses If you have activated the advanced logs on requests and responses payloads, with an average (requests + responses) payload size of 10kB, and you have 10 RPS, and you want to keep the logs for 6 months, it will take 1.5 TB of storage. It might be fine for some use cases, but keep in mind that activating the advanced logs on all API requests and responses will generate a lot of data and reduce the gateway capacities as well.","title":"Storage"},{"location":"api-management/install/reference-architecture/#memory","text":"Memory is highly dependent on use cases. The more APIs you will have that load payloads in memory (encryption policy, payload transformation, advanced logs, ...) the more the memory consumption will increase.","title":"Memory"},{"location":"api-management/install/reference-architecture/#cpu","text":"The CPU load is directly related to the API traffic. It is the metric to follow to evaluate the load level of the gateways and the one to use to determine the horizontal scalability (CPU > 75% for example)","title":"CPU"},{"location":"api-management/install/reference-architecture/#hardware-recommendations-for-self-hosted-deployment","text":"Component vCPU RAM (GB) Disk (Go) Dev Portal + REST API (dev portal only) 1 2 20 Console + REST API (console only) 1 2 20 Dev Portal + Console + REST API 2 4 20 APIm Gateway instance Production best practice (HA) is 2 nodes 0.25 - 4 512 MB - 8 20 Alert Engine instance Production best practice (HA) is 2 nodes 0.25 - 4 512 MB - 8 20 Analytics DB instance (ElasticSearch) Production best practice is 3 nodes Offical hardware recommendations 1 - 8 2 - 8 or more 20 + 0.5 per million requests for default metrics Config DB instance (MongoDB or JDBC DB) Production best practice is 3 nodes 1 2 30 Rate Limit DB instance (Redis) Production best practice is 3 nodes 2 4 20","title":"Hardware recommendations for self-hosted deployment"},{"location":"cockpit/","tags":["Cockpit","ENTERPRISE"],"text":"Cockpit \u00b6 Note Placeholder page.","title":"Cockpit"},{"location":"cockpit/#cockpit","text":"Note Placeholder page.","title":"Cockpit"}]}