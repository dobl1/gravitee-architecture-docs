{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Gravitee.io Doc \u00b6 Note Placeholder page.","title":"Home"},{"location":"#graviteeio-doc","text":"Note Placeholder page.","title":"Gravitee.io Doc"},{"location":"access-management/","tags":["Access Management","OSS"],"text":"Access Management \u00b6 Note Placeholder page.","title":"Access Management"},{"location":"access-management/#access-management","text":"Note Placeholder page.","title":"Access Management"},{"location":"alert-engine/","tags":["Alert Engine","ENTERPRISE"],"text":"Alert Engine \u00b6 Note Placeholder page.","title":"Alert Engine"},{"location":"alert-engine/#alert-engine","text":"Note Placeholder page.","title":"Alert Engine"},{"location":"api-designer/","tags":["API Designer","ENTERPRISE"],"text":"API Designer \u00b6 Note Placeholder page.","title":"API Designer"},{"location":"api-designer/#api-designer","text":"Note Placeholder page.","title":"API Designer"},{"location":"api-management/","tags":["API Management","OSS"],"text":"API Management \u00b6 Note Placeholder page.","title":"API Management"},{"location":"api-management/#api-management","text":"Note Placeholder page.","title":"API Management"},{"location":"api-management/install/hybrid/","tags":["API Management","OSS","Hybrid"],"text":"APIm Hybrid Deployment Guide \u00b6 Introduction This documentation page relates to the installation of the client (On-Prem / Private Cloud) part of the API Management platform in a Hybrid architecture (SaaS + On-prem / Private cloud). Hybrid Architecture \u00b6 SaaS Components \u00b6 Component Description Administration Console (for API producers) This web UI gives easy access to some key APIM API services. API Publishers can use it to publish APIs. Administrators can also configure global platform settings and specific portal settings. Dev / API Portal (for API consumers) This web UI gives easy access to some key APIM API services. API Consumers can use it to search for, view, try out and subscribe to a published API. They can also use it to manage their applications . Management API This RESTful API exposes services to manage and configure the APIM Console and APIM Portal web UIs. All exposed services are restricted by authentication and authorization rules. For more information, see the API Reference section. SaaS API Gateways APIM Gateway is the core component of the APIM platform. You can think of it like a smart proxy. Unlike a traditional HTTP proxy, APIM Gateway has the capability to apply policies (i.e., rules) to both HTTP requests and responses according to your needs. With these policies, you can enhance request and response processing by adding transformations, security, and many other exciting features. Bridge Gateways A bridge API Gateway exposes extra HTTP services for bridging HTTP calls to the underlying repository (which can be any of our supported repositories: MongoDB, JDBC and so on) Config Database All the API Management platform management data, such as API definitions, users, applications and plans. S3 Bucket + Analytics Database Analytics and logs data [Optional] Cockpit Cockpit is a centralized, multi-environments / organizations tool for managing all your Gravitee API Management and Access Management installations in a single place. [Optional] API Designer Drag-and-Drop graphical (MindMap based) API designer to quickly and intuitively design your APIs (Swagger / OAS) and even deploy mocked APIs for quick testing. [Optional] Alert Engine Alert Engine (AE) provides APIM and AM users with efficient and flexible API platform monitoring, including advanced alerting configuration and notifications sent through their preferred channels, such as email, Slack and using Webhooks. AE does not require any external components or a database as it does not store anything. It receives events and sends notifications under the conditions which have been pre-configured upstream with triggers. On-prem / Private cloud components \u00b6 Component Description Gravitee.io APIm Gaetway APIM Gateway is the core component of the APIM platform, smartly proxing trafic applying policies. Logstash Collect and send local Gateways logs and metrics to the Gravitee.io APIM SaaS Control Plane. Redis Database use locally for rate limits synchronized counters (RateLimit, Quota, Spike Arrest) and optionnaly as an external cache for the Cache policy . Self-Hosted (Hybrid) gateway \u00b6 Installation \u00b6 Kubernetes (Helm) Docker Binaries Online documentation and assets Install APIM on Kubernetes with the Helm Chart Deploy a Hybrid architecture in Kubernetes Gravitee.io Helm Charts Prerequisites Kubectl Helm v3 Steps : Add the Gravitee.io Helm charts repository. helm repo add graviteeio https://helm.gravitee.io Install using the values.yaml file. Here is the full values.yaml example , please customize it following the Configuration sections . helm install graviteeio-apim3x graviteeio/apim3 -f values.yaml Online documentation APIM Docker installation Local file structure . \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 gateway \u2502 \u2502 \u2514\u2500\u2500 gravitee.yml # (1) \u2502 \u2514\u2500\u2500 logstash \u2502 \u2514\u2500\u2500 logstash.conf # (2) \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 logs \u2502 \u2514\u2500\u2500 apim-gateway-dev \u2514\u2500\u2500 plugins # (3) \u251c\u2500\u2500 gravitee-apim-repository-hazelcast-3.18.3.zip \u2514\u2500\u2500 gravitee-apim-repository-redis-3.18.3.zip If you prefer to override the default gravitee.yml configuration file, instead of using the environement variables in the docker-compose.yml file. Logstash configuration file . Additional plugins location. Download plugins gravitee-apim-repository-redis-3.18.3.zip gravitee-apim-repository-hazelcast-3.18.3.zip Download plugins gravitee-apim-repository-redis-3.18.3.zip Online documentation APIM VMs installation Configuration \u00b6 There is at least 3 connections to configure : The connection to the SaaS Management plane with the Bridge Gateway. The connection to push Analytics and Logs with file or tcp reporter pushing data for logstash to send them to the SaaS storage. The connection the local rate limits database. [Optional] The connection to the SaaS Alert Engine. Management \u00b6 Kubernetes (Helm with values.yaml file) Docker Gateway with gravitee.yml file Into the values.yaml configuration file : values.yaml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 management : type : http gateway : management : http : url : https://bridge-gateway-url:bridge-gateway-port username : kubernetes://<namespace>/secrets/<my-secret-name>/<my-secret-key> password : kubernetes://<namespace>/secrets/<my-secret-name>/<my-secret-key> # ssl: # trustall: true # verifyHostname: true # keystore: # type: jks # Supports jks, pem, pkcs12 # path: ${gravitee.home}/security/keystore.jks # password: secret # truststore: # type: jks # Supports jks, pem, pkcs12 # path: ${gravitee.home}/security/truststore.jks # password: secret # proxy: # host: # port: # type: http # username: # password: Online documentation Install APIM on Kubernetes with the Helm Chart Deploy a Hybrid architecture in Kubernetes Gravitee.io Helm Charts docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 version : '3.5' services : gateway : image : graviteeio/apim-gateway:${APIM_VERSION:-3.18.3} container_name : gio_apim_gateway restart : always ports : - \"8082:8082\" environment : # --- BRIDGE GATEWAYS --- - gravitee_management_type=http - gravitee_management_http_url=https://bridge-gateway-url:bridge-gateway-port - gravitee_management_http_authentication_basic_username=bridge-gateway-username - gravitee_management_http_authentication_basic_password=bridge-gateway-password Into the gravitee.yml configuration file : gravitee.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 management : type : http http : url : https://bridge-gateway-url:bridge-gateway-port keepAlive : true idleTimeout : 30000 connectTimeout : 10000 authentication : basic : username : bridge-gateway-username password : bridge-gateway-password ssl : trustAll : true verifyHostname : true keystore : type : # can be jks / pem / pkcs12 path : password : trustore : type : # can be jks / pem / pkcs12 path : password : Online documentation APIM hybrid deployment Analytics and Logs \u00b6 Kubernetes (Helm) Docker Gateway with gravitee.yml file Files \u00b6 Into the values.yaml configuration file : values.yaml 1 2 3 4 5 6 7 gateway : reporters : tcp : enabled : true host : logstash port : 8379 output : elasticsearch Direct (TCP) \u00b6 Warning Choosing the direct connection may result in a loss of data. If the connection between the gateway and logstash is broken the newly generated analytics and logs data will be lost. Into the values.yaml configuration file : values.yaml 1 2 3 4 5 6 7 gateway : reporters : tcp : enabled : true host : logstash port : 8379 output : elasticsearch Online documentation APIM hybrid deployment Full values.yaml example docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 version : '3.5' services : gateway : image : graviteeio/apim-gateway:${APIM_VERSION:-3.18.3} container_name : gio_apim_gateway restart : always ports : - \"8082:8082\" environment : # --- LOGSTASH --- - gravitee_reporters_elasticsearch_enabled=false - gravitee_reportealert-engine-usernamers_tcp_enabled=true - gravitee_reporters_tcp_host=logstash - gravitee_reporters_tcp_port=8379 - gravitee_reporters_tcp_output=elasticsearch gravitee.yml 1 2 3 4 5 6 7 8 reporters : elasticsearch : enabled : false # Is the reporter enabled or not (default to true) tcp : enabled : true host : logstash-host port : logstash-port output : elasticsearch Rate limits \u00b6 Kubernetes (Helm) Docker Gateway with gravitee.yml file values.yaml 1 2 3 4 5 6 7 ratelimit : type : redis redis : host : 'redis-host' port : 6379 password : 'redis-password' download : true Online documentation APIM hybrid deployment Full values.yaml example docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 version : '3.5' services : gateway : image : graviteeio/apim-gateway:${APIM_VERSION:-3.18.3} container_name : gio_apim_gateway restart : always ports : - \"8082:8082\" environment : # --- RATE LIMIT REPO --- - gravitee_ratelimit_type=redis - gravitee_ratelimit_redis_host=redis-host - gravitee_ratelimit_redis_port=6379 - gravitee_ratelimit_redis_password=${REDIS_PASS:-redis-password} gravitee.yml 1 2 3 4 5 6 7 ratelimit : # type: hazelcast type : redis redis : host : redis-host port : 6379 password : redis-password Alert Engine \u00b6 Kubernetes (Helm) Docker Gateway with gravitee.yml file Into the values.yaml configuration file : values.yaml 1 2 3 4 5 6 7 8 alerts : enabled : true endpoints : - https://alert-engine-url:alert-engine-port security : enabled : true username : alert-engine-username password : alert-engine-password Online documentation Integrate AE with API Management Install APIM on Kubernetes with the Helm Chart Deploy a Hybrid architecture in Kubernetes Gravitee.io Helm Charts docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 version : '3.5' services : gateway : image : graviteeio/apim-gateway:${APIM_VERSION:-3.18.3} container_name : gio_apim_gateway restart : always ports : - \"8082:8082\" environment : # --- ALERT ENGINE --- - gravitee_alerts_alertengine_enabled=true - gravitee_alerts_alertengine_ws_discovery=true - gravitee_alerts_alertengine_ws_endpoints_0=https://alert-engine-url:alert-engine-port - gravitee_alerts_alertengine_ws_security_username=alert-engine-username - gravitee_alerts_alertengine_ws_security_password=alert-engine-password gravitee.yml 1 2 3 4 5 6 7 8 9 10 alerts : alert-engine : enabled : true ws : discovery : true endpoints : - https://alert-engine-url:alert-engine-port security : username : alert-engine-username password : alert-engine-password Cockpit \u00b6 Follow cockpit instructions Please follow directly the instruction you have on cockpit. https://cockpit.gravitee.io/accounts/YOUR-ACCOUNT-HRID/installations/how-to Full example \u00b6 Kubernetes (Helm) Docker (VMs) Gateway with gravitee.yml file Into the values.yaml configuration file : values.yaml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 management : type : http gateway : management : http : url : https://bridge-gateway-url:bridge-gateway-port username : kubernetes://<namespace>/secrets/<my-secret-name>/<my-secret-key> password : kubernetes://<namespace>/secrets/<my-secret-name>/<my-secret-key> reporters : tcp : enabled : true host : logstash port : 8379 output : elasticsearch alerts : enabled : true endpoints : - https://alert-engine-url:alert-engine-port security : enabled : true username : alert-engine-username password : alert-engine-password Online documentation Install APIM on Kubernetes with the Helm Chart Deploy a Hybrid architecture in Kubernetes Gravitee.io Helm Charts - Values Template docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 version : '3.5' services : gateway : image : graviteeio/apim-gateway:${APIM_VERSION:-3.18.3} container_name : gio_apim_gateway restart : always ports : - \"8082:8082\" depends_on : - rate-limit - logstash volumes : # --- LOCAL LOG FILES --- - ./logs/apim-gateway-dev:/opt/graviteeio-gateway/logs # --- EE LICENSE FILE --- # - ${GIO_LICENSE}:/opt/graviteeio-gateway/license/license.key # --- ADDITIONAL PLUGINS --- - ./plugins:/opt/graviteeio-gateway/plugins-ext - ./config/gateway/gravitee.yml:/opt/graviteeio-gateway/config/gravitee.yml:ro environment : # --- PLUGINS LOCATIONS --- - gravitee_plugins_path_0=/opt/graviteeio-gateway/plugins - gravitee_plugins_path_1=/opt/graviteeio-gateway/plugins-ext # --- COCKPIT ORGS & ENVS --- - gravitee_organizations=dorian-se - gravitee_environments=dev # --- SHARDING TAGS & TENANTS --- - gravitee_tags=internal # - gravitee_tenant=xxx # --- BRIDGE GATEWAYS --- - gravitee_management_type=http - gravitee_management_http_url=https://bridge-gateway-url:bridge-gateway-port - gravitee_management_http_authentication_basic_username=bridge-gateway-username - gravitee_management_http_authentication_basic_password=bridge-gateway-password # --- RATE LIMIT REPO --- - gravitee_ratelimit_type=redis - gravitee_ratelimit_redis_host=rate-limit - gravitee_ratelimit_redis_port=6379 - gravitee_ratelimit_redis_password=${REDIS_PASS:-redis-password} # - gravitee_ratelimit_type=hazelcast # --- LOGSTASH --- - gravitee_reporters_elasticsearch_enabled=false - gravitee_reportealert-engine-usernamers_tcp_enabled=true - gravitee_reporters_tcp_host=logstash - gravitee_reporters_tcp_port=8379 - gravitee_reporters_tcp_output=elasticsearch # --- ALERT ENGINE --- # - gravitee_alerts_alertengine_enabled=true # - gravitee_alerts_alertengine_ws_discovery=true # - gravitee_alerts_alertengine_ws_endpoints_0=https://alert-engine-url:alert-engine-port # - gravitee_alerts_alertengine_ws_security_username=alert-engine-username # - gravitee_alerts_alertengine_ws_security_password=alert-engine-password # --- SECRETS --- - gravitee_api_properties_encryption_secret=your-own-api-32-caracters-secret rate-limit : # https://hub.docker.com/_/redis?tab=tags image : redis:${REDIS_VERSION:-7.0.4-alpine3.16} container_name : gio_ratelimit_redis hostname : redis restart : always ports : - '6379:6379' command : redis-server --requirepass ${REDIS_PASS:-redis-password} volumes : - redis_data:/data logstash : # https://www.docker.elastic.co/r/logstash/logstash-oss image : docker.elastic.co/logstash/logstash-oss:8.3.2 ports : - \"8379:8379\" volumes : - ./config/logstash:/usr/share/logstash/pipeline:ro environment : LS_JAVA_OPTS : \"-Xmx256m -Xms256m\" volumes : redis_data : driver : local gravitee.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 ############################################################################################################ #################################### Gravitee.IO Gateway - Configuration ################################### ############################################################################################################ ############################################################################################################ # This file is the general configuration of Gravitee.IO Gateway: # - Properties (and respective default values) in comment are provided for information. # - You can reference other property by using ${property.name} syntax # - gravitee.home property is automatically set-up by launcher and refers to the installation path. Do not override it ! # # Please have a look to http://docs.gravitee.io/ for more options and fine-grained granularity ############################################################################################################ organizations : cockpit-org-hrid environments : cockpit-env-hrid tags : your, sharding, tags #example: internal plugins : path : - /opt/graviteeio-gateway/plugins - /opt/graviteeio-gateway/plugins-ext management : type : http http : url : https://bridge-gateway-url:bridge-gateway-port authentication : basic : username : bridge-gateway-username password : bridge-gateway-password ratelimit : # type: hazelcast type : redis redis : host : redis-host port : 6379 password : redis-password cache : type : ehcache reporters : elasticsearch : enabled : false # Is the reporter enabled or not (default to true) tcp : enabled : true host : logstash-host port : logstash-port output : elasticsearch services : core : http : enabled : true port : 18082 host : localhost authentication : type : basic users : admin : internal-api-password sync : delay : 5000 unit : MILLISECONDS distributed : false # By enabling this mode, data synchronization process is distributed over clustered API gateways. bulk_items : 100 # Defines the number of items to retrieve during synchronization (events, plans, api keys, ...). local : enabled : false path : ${gravitee.home}/apis # The path to API descriptors monitoring : delay : 5000 unit : MILLISECONDS distributed : false # By enabling this mode, data monitoring gathering process is distributed over clustered API gateways. metrics : enabled : false prometheus : enabled : true tracing : enabled : false api : properties : encryption : secret : your-own-api-32-caracters-secret alerts : alert-engine : enabled : true ws : discovery : true endpoints : - https://alert-engine-url:alert-engine-port security : username : alert-engine-username password : alert-engine-password classloader : legacy : enabled : false Redis \u00b6 Installation \u00b6 Kubernetes (Helm) Docker VM Bitnami helm charts docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 version : '3.5' services : rate-limit : # https://hub.docker.com/_/redis?tab=tags image : redis:${REDIS_VERSION:-7.0.4-alpine3.16} container_name : gio_ratelimit_redis hostname : redis restart : always ports : - '6379:6379' command : redis-server --requirepass ${REDIS_PASS:-redis-password} volumes : - redis_data:/data volumes : redis_data : driver : local Installing Redis from redis.io Configuration \u00b6 Easy peasy No specific configuration is needed. Logstash \u00b6 Installation \u00b6 Kubernetes (Helm) Docker VM Official helm charts Bitnami helm charts docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11 12 version : '3.5' services : logstash : # https://www.docker.elastic.co/r/logstash/logstash-oss image : docker.elastic.co/logstash/logstash-oss:8.3.2 ports : - \"8379:8379\" volumes : - ./config/logstash:/usr/share/logstash/pipeline:ro environment : LS_JAVA_OPTS : \"-Xmx256m -Xms256m\" Download Logstash OSS Configuration \u00b6 Input TCP - Output S3 bucket logstash.conf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 input { tcp { port => 8379 codec => \"json\" } } filter { if [type] != \"request\" { mutate { remove_field => [\"path\", \"host\"] } } } output { s3 { access_key_id => \"${S3_ACEESS_KEY_ID}\" secret_access_key => \"${S3_SECRET_ACCESS_KEY}\" region => \"${S3_REGION}\" bucket => \"${S3_BUCKET_NAME}\" size_file => 10485760 codec => \"json_lines\" } } Online documentation Configuring Logstash","title":"Hybrid"},{"location":"api-management/install/hybrid/#apim-hybrid-deployment-guide","text":"Introduction This documentation page relates to the installation of the client (On-Prem / Private Cloud) part of the API Management platform in a Hybrid architecture (SaaS + On-prem / Private cloud).","title":"APIm Hybrid Deployment Guide"},{"location":"api-management/install/hybrid/#hybrid-architecture","text":"","title":"Hybrid Architecture"},{"location":"api-management/install/hybrid/#saas-components","text":"Component Description Administration Console (for API producers) This web UI gives easy access to some key APIM API services. API Publishers can use it to publish APIs. Administrators can also configure global platform settings and specific portal settings. Dev / API Portal (for API consumers) This web UI gives easy access to some key APIM API services. API Consumers can use it to search for, view, try out and subscribe to a published API. They can also use it to manage their applications . Management API This RESTful API exposes services to manage and configure the APIM Console and APIM Portal web UIs. All exposed services are restricted by authentication and authorization rules. For more information, see the API Reference section. SaaS API Gateways APIM Gateway is the core component of the APIM platform. You can think of it like a smart proxy. Unlike a traditional HTTP proxy, APIM Gateway has the capability to apply policies (i.e., rules) to both HTTP requests and responses according to your needs. With these policies, you can enhance request and response processing by adding transformations, security, and many other exciting features. Bridge Gateways A bridge API Gateway exposes extra HTTP services for bridging HTTP calls to the underlying repository (which can be any of our supported repositories: MongoDB, JDBC and so on) Config Database All the API Management platform management data, such as API definitions, users, applications and plans. S3 Bucket + Analytics Database Analytics and logs data [Optional] Cockpit Cockpit is a centralized, multi-environments / organizations tool for managing all your Gravitee API Management and Access Management installations in a single place. [Optional] API Designer Drag-and-Drop graphical (MindMap based) API designer to quickly and intuitively design your APIs (Swagger / OAS) and even deploy mocked APIs for quick testing. [Optional] Alert Engine Alert Engine (AE) provides APIM and AM users with efficient and flexible API platform monitoring, including advanced alerting configuration and notifications sent through their preferred channels, such as email, Slack and using Webhooks. AE does not require any external components or a database as it does not store anything. It receives events and sends notifications under the conditions which have been pre-configured upstream with triggers.","title":"SaaS Components"},{"location":"api-management/install/hybrid/#on-prem-private-cloud-components","text":"Component Description Gravitee.io APIm Gaetway APIM Gateway is the core component of the APIM platform, smartly proxing trafic applying policies. Logstash Collect and send local Gateways logs and metrics to the Gravitee.io APIM SaaS Control Plane. Redis Database use locally for rate limits synchronized counters (RateLimit, Quota, Spike Arrest) and optionnaly as an external cache for the Cache policy .","title":"On-prem / Private cloud components"},{"location":"api-management/install/hybrid/#self-hosted-hybrid-gateway","text":"","title":"Self-Hosted (Hybrid) gateway"},{"location":"api-management/install/hybrid/#installation","text":"Kubernetes (Helm) Docker Binaries Online documentation and assets Install APIM on Kubernetes with the Helm Chart Deploy a Hybrid architecture in Kubernetes Gravitee.io Helm Charts Prerequisites Kubectl Helm v3 Steps : Add the Gravitee.io Helm charts repository. helm repo add graviteeio https://helm.gravitee.io Install using the values.yaml file. Here is the full values.yaml example , please customize it following the Configuration sections . helm install graviteeio-apim3x graviteeio/apim3 -f values.yaml Online documentation APIM Docker installation Local file structure . \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 gateway \u2502 \u2502 \u2514\u2500\u2500 gravitee.yml # (1) \u2502 \u2514\u2500\u2500 logstash \u2502 \u2514\u2500\u2500 logstash.conf # (2) \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 logs \u2502 \u2514\u2500\u2500 apim-gateway-dev \u2514\u2500\u2500 plugins # (3) \u251c\u2500\u2500 gravitee-apim-repository-hazelcast-3.18.3.zip \u2514\u2500\u2500 gravitee-apim-repository-redis-3.18.3.zip If you prefer to override the default gravitee.yml configuration file, instead of using the environement variables in the docker-compose.yml file. Logstash configuration file . Additional plugins location. Download plugins gravitee-apim-repository-redis-3.18.3.zip gravitee-apim-repository-hazelcast-3.18.3.zip Download plugins gravitee-apim-repository-redis-3.18.3.zip Online documentation APIM VMs installation","title":"Installation"},{"location":"api-management/install/hybrid/#configuration","text":"There is at least 3 connections to configure : The connection to the SaaS Management plane with the Bridge Gateway. The connection to push Analytics and Logs with file or tcp reporter pushing data for logstash to send them to the SaaS storage. The connection the local rate limits database. [Optional] The connection to the SaaS Alert Engine.","title":"Configuration"},{"location":"api-management/install/hybrid/#management","text":"Kubernetes (Helm with values.yaml file) Docker Gateway with gravitee.yml file Into the values.yaml configuration file : values.yaml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 management : type : http gateway : management : http : url : https://bridge-gateway-url:bridge-gateway-port username : kubernetes://<namespace>/secrets/<my-secret-name>/<my-secret-key> password : kubernetes://<namespace>/secrets/<my-secret-name>/<my-secret-key> # ssl: # trustall: true # verifyHostname: true # keystore: # type: jks # Supports jks, pem, pkcs12 # path: ${gravitee.home}/security/keystore.jks # password: secret # truststore: # type: jks # Supports jks, pem, pkcs12 # path: ${gravitee.home}/security/truststore.jks # password: secret # proxy: # host: # port: # type: http # username: # password: Online documentation Install APIM on Kubernetes with the Helm Chart Deploy a Hybrid architecture in Kubernetes Gravitee.io Helm Charts docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 version : '3.5' services : gateway : image : graviteeio/apim-gateway:${APIM_VERSION:-3.18.3} container_name : gio_apim_gateway restart : always ports : - \"8082:8082\" environment : # --- BRIDGE GATEWAYS --- - gravitee_management_type=http - gravitee_management_http_url=https://bridge-gateway-url:bridge-gateway-port - gravitee_management_http_authentication_basic_username=bridge-gateway-username - gravitee_management_http_authentication_basic_password=bridge-gateway-password Into the gravitee.yml configuration file : gravitee.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 management : type : http http : url : https://bridge-gateway-url:bridge-gateway-port keepAlive : true idleTimeout : 30000 connectTimeout : 10000 authentication : basic : username : bridge-gateway-username password : bridge-gateway-password ssl : trustAll : true verifyHostname : true keystore : type : # can be jks / pem / pkcs12 path : password : trustore : type : # can be jks / pem / pkcs12 path : password : Online documentation APIM hybrid deployment","title":"Management"},{"location":"api-management/install/hybrid/#analytics-and-logs","text":"Kubernetes (Helm) Docker Gateway with gravitee.yml file","title":"Analytics and Logs"},{"location":"api-management/install/hybrid/#rate-limits","text":"Kubernetes (Helm) Docker Gateway with gravitee.yml file values.yaml 1 2 3 4 5 6 7 ratelimit : type : redis redis : host : 'redis-host' port : 6379 password : 'redis-password' download : true Online documentation APIM hybrid deployment Full values.yaml example docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 version : '3.5' services : gateway : image : graviteeio/apim-gateway:${APIM_VERSION:-3.18.3} container_name : gio_apim_gateway restart : always ports : - \"8082:8082\" environment : # --- RATE LIMIT REPO --- - gravitee_ratelimit_type=redis - gravitee_ratelimit_redis_host=redis-host - gravitee_ratelimit_redis_port=6379 - gravitee_ratelimit_redis_password=${REDIS_PASS:-redis-password} gravitee.yml 1 2 3 4 5 6 7 ratelimit : # type: hazelcast type : redis redis : host : redis-host port : 6379 password : redis-password","title":"Rate limits"},{"location":"api-management/install/hybrid/#alert-engine","text":"Kubernetes (Helm) Docker Gateway with gravitee.yml file Into the values.yaml configuration file : values.yaml 1 2 3 4 5 6 7 8 alerts : enabled : true endpoints : - https://alert-engine-url:alert-engine-port security : enabled : true username : alert-engine-username password : alert-engine-password Online documentation Integrate AE with API Management Install APIM on Kubernetes with the Helm Chart Deploy a Hybrid architecture in Kubernetes Gravitee.io Helm Charts docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 version : '3.5' services : gateway : image : graviteeio/apim-gateway:${APIM_VERSION:-3.18.3} container_name : gio_apim_gateway restart : always ports : - \"8082:8082\" environment : # --- ALERT ENGINE --- - gravitee_alerts_alertengine_enabled=true - gravitee_alerts_alertengine_ws_discovery=true - gravitee_alerts_alertengine_ws_endpoints_0=https://alert-engine-url:alert-engine-port - gravitee_alerts_alertengine_ws_security_username=alert-engine-username - gravitee_alerts_alertengine_ws_security_password=alert-engine-password gravitee.yml 1 2 3 4 5 6 7 8 9 10 alerts : alert-engine : enabled : true ws : discovery : true endpoints : - https://alert-engine-url:alert-engine-port security : username : alert-engine-username password : alert-engine-password","title":"Alert Engine"},{"location":"api-management/install/hybrid/#cockpit","text":"Follow cockpit instructions Please follow directly the instruction you have on cockpit. https://cockpit.gravitee.io/accounts/YOUR-ACCOUNT-HRID/installations/how-to","title":"Cockpit"},{"location":"api-management/install/hybrid/#full-example","text":"Kubernetes (Helm) Docker (VMs) Gateway with gravitee.yml file Into the values.yaml configuration file : values.yaml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 management : type : http gateway : management : http : url : https://bridge-gateway-url:bridge-gateway-port username : kubernetes://<namespace>/secrets/<my-secret-name>/<my-secret-key> password : kubernetes://<namespace>/secrets/<my-secret-name>/<my-secret-key> reporters : tcp : enabled : true host : logstash port : 8379 output : elasticsearch alerts : enabled : true endpoints : - https://alert-engine-url:alert-engine-port security : enabled : true username : alert-engine-username password : alert-engine-password Online documentation Install APIM on Kubernetes with the Helm Chart Deploy a Hybrid architecture in Kubernetes Gravitee.io Helm Charts - Values Template docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 version : '3.5' services : gateway : image : graviteeio/apim-gateway:${APIM_VERSION:-3.18.3} container_name : gio_apim_gateway restart : always ports : - \"8082:8082\" depends_on : - rate-limit - logstash volumes : # --- LOCAL LOG FILES --- - ./logs/apim-gateway-dev:/opt/graviteeio-gateway/logs # --- EE LICENSE FILE --- # - ${GIO_LICENSE}:/opt/graviteeio-gateway/license/license.key # --- ADDITIONAL PLUGINS --- - ./plugins:/opt/graviteeio-gateway/plugins-ext - ./config/gateway/gravitee.yml:/opt/graviteeio-gateway/config/gravitee.yml:ro environment : # --- PLUGINS LOCATIONS --- - gravitee_plugins_path_0=/opt/graviteeio-gateway/plugins - gravitee_plugins_path_1=/opt/graviteeio-gateway/plugins-ext # --- COCKPIT ORGS & ENVS --- - gravitee_organizations=dorian-se - gravitee_environments=dev # --- SHARDING TAGS & TENANTS --- - gravitee_tags=internal # - gravitee_tenant=xxx # --- BRIDGE GATEWAYS --- - gravitee_management_type=http - gravitee_management_http_url=https://bridge-gateway-url:bridge-gateway-port - gravitee_management_http_authentication_basic_username=bridge-gateway-username - gravitee_management_http_authentication_basic_password=bridge-gateway-password # --- RATE LIMIT REPO --- - gravitee_ratelimit_type=redis - gravitee_ratelimit_redis_host=rate-limit - gravitee_ratelimit_redis_port=6379 - gravitee_ratelimit_redis_password=${REDIS_PASS:-redis-password} # - gravitee_ratelimit_type=hazelcast # --- LOGSTASH --- - gravitee_reporters_elasticsearch_enabled=false - gravitee_reportealert-engine-usernamers_tcp_enabled=true - gravitee_reporters_tcp_host=logstash - gravitee_reporters_tcp_port=8379 - gravitee_reporters_tcp_output=elasticsearch # --- ALERT ENGINE --- # - gravitee_alerts_alertengine_enabled=true # - gravitee_alerts_alertengine_ws_discovery=true # - gravitee_alerts_alertengine_ws_endpoints_0=https://alert-engine-url:alert-engine-port # - gravitee_alerts_alertengine_ws_security_username=alert-engine-username # - gravitee_alerts_alertengine_ws_security_password=alert-engine-password # --- SECRETS --- - gravitee_api_properties_encryption_secret=your-own-api-32-caracters-secret rate-limit : # https://hub.docker.com/_/redis?tab=tags image : redis:${REDIS_VERSION:-7.0.4-alpine3.16} container_name : gio_ratelimit_redis hostname : redis restart : always ports : - '6379:6379' command : redis-server --requirepass ${REDIS_PASS:-redis-password} volumes : - redis_data:/data logstash : # https://www.docker.elastic.co/r/logstash/logstash-oss image : docker.elastic.co/logstash/logstash-oss:8.3.2 ports : - \"8379:8379\" volumes : - ./config/logstash:/usr/share/logstash/pipeline:ro environment : LS_JAVA_OPTS : \"-Xmx256m -Xms256m\" volumes : redis_data : driver : local gravitee.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 ############################################################################################################ #################################### Gravitee.IO Gateway - Configuration ################################### ############################################################################################################ ############################################################################################################ # This file is the general configuration of Gravitee.IO Gateway: # - Properties (and respective default values) in comment are provided for information. # - You can reference other property by using ${property.name} syntax # - gravitee.home property is automatically set-up by launcher and refers to the installation path. Do not override it ! # # Please have a look to http://docs.gravitee.io/ for more options and fine-grained granularity ############################################################################################################ organizations : cockpit-org-hrid environments : cockpit-env-hrid tags : your, sharding, tags #example: internal plugins : path : - /opt/graviteeio-gateway/plugins - /opt/graviteeio-gateway/plugins-ext management : type : http http : url : https://bridge-gateway-url:bridge-gateway-port authentication : basic : username : bridge-gateway-username password : bridge-gateway-password ratelimit : # type: hazelcast type : redis redis : host : redis-host port : 6379 password : redis-password cache : type : ehcache reporters : elasticsearch : enabled : false # Is the reporter enabled or not (default to true) tcp : enabled : true host : logstash-host port : logstash-port output : elasticsearch services : core : http : enabled : true port : 18082 host : localhost authentication : type : basic users : admin : internal-api-password sync : delay : 5000 unit : MILLISECONDS distributed : false # By enabling this mode, data synchronization process is distributed over clustered API gateways. bulk_items : 100 # Defines the number of items to retrieve during synchronization (events, plans, api keys, ...). local : enabled : false path : ${gravitee.home}/apis # The path to API descriptors monitoring : delay : 5000 unit : MILLISECONDS distributed : false # By enabling this mode, data monitoring gathering process is distributed over clustered API gateways. metrics : enabled : false prometheus : enabled : true tracing : enabled : false api : properties : encryption : secret : your-own-api-32-caracters-secret alerts : alert-engine : enabled : true ws : discovery : true endpoints : - https://alert-engine-url:alert-engine-port security : username : alert-engine-username password : alert-engine-password classloader : legacy : enabled : false","title":"Full example"},{"location":"api-management/install/hybrid/#redis","text":"","title":"Redis"},{"location":"api-management/install/hybrid/#installation_1","text":"Kubernetes (Helm) Docker VM Bitnami helm charts docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 version : '3.5' services : rate-limit : # https://hub.docker.com/_/redis?tab=tags image : redis:${REDIS_VERSION:-7.0.4-alpine3.16} container_name : gio_ratelimit_redis hostname : redis restart : always ports : - '6379:6379' command : redis-server --requirepass ${REDIS_PASS:-redis-password} volumes : - redis_data:/data volumes : redis_data : driver : local Installing Redis from redis.io","title":"Installation"},{"location":"api-management/install/hybrid/#configuration_1","text":"Easy peasy No specific configuration is needed.","title":"Configuration"},{"location":"api-management/install/hybrid/#logstash","text":"","title":"Logstash"},{"location":"api-management/install/hybrid/#installation_2","text":"Kubernetes (Helm) Docker VM Official helm charts Bitnami helm charts docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11 12 version : '3.5' services : logstash : # https://www.docker.elastic.co/r/logstash/logstash-oss image : docker.elastic.co/logstash/logstash-oss:8.3.2 ports : - \"8379:8379\" volumes : - ./config/logstash:/usr/share/logstash/pipeline:ro environment : LS_JAVA_OPTS : \"-Xmx256m -Xms256m\" Download Logstash OSS","title":"Installation"},{"location":"api-management/install/hybrid/#configuration_2","text":"Input TCP - Output S3 bucket logstash.conf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 input { tcp { port => 8379 codec => \"json\" } } filter { if [type] != \"request\" { mutate { remove_field => [\"path\", \"host\"] } } } output { s3 { access_key_id => \"${S3_ACEESS_KEY_ID}\" secret_access_key => \"${S3_SECRET_ACCESS_KEY}\" region => \"${S3_REGION}\" bucket => \"${S3_BUCKET_NAME}\" size_file => 10485760 codec => \"json_lines\" } } Online documentation Configuring Logstash","title":"Configuration"},{"location":"cockpit/","tags":["Cockpit","ENTERPRISE"],"text":"Cockpit \u00b6 Note Placeholder page.","title":"Cockpit"},{"location":"cockpit/#cockpit","text":"Note Placeholder page.","title":"Cockpit"}]}